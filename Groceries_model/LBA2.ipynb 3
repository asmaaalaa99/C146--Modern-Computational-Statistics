{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pystan\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats as sts\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "For the data pre-processing, I am assigning the neighborhood names for each student \n",
    "'''\n",
    "london_students = [\n",
    "\"Gelana Tostaeva\",\n",
    "\"Sara Merner\",\n",
    "\"Gera\",\n",
    "\"Evan Buckman\",\n",
    "\"Frances Pak\",\n",
    "\"Erika Sloan\",\n",
    "\"Sonia\",\n",
    "\"Michelle Hackl\",\n",
    "\"Mandla\",\n",
    "\"Nikesh Shrestha\",\n",
    "\"Hana Mcmahon-Cole\",\n",
    "\"Barbara\"]\n",
    "San_Francisco_students = [\" Jingren\", \"Vu\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Pre-processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pre-processing the responce data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Unnamed: 6</th>\n",
       "      <th>Unnamed: 7</th>\n",
       "      <th>Unnamed: 8</th>\n",
       "      <th>Unnamed: 9</th>\n",
       "      <th>...</th>\n",
       "      <th>Unnamed: 55</th>\n",
       "      <th>Unnamed: 56</th>\n",
       "      <th>Unnamed: 57</th>\n",
       "      <th>Unnamed: 58</th>\n",
       "      <th>Chicken breasts</th>\n",
       "      <th>Unnamed: 60</th>\n",
       "      <th>Unnamed: 61</th>\n",
       "      <th>Unnamed: 62</th>\n",
       "      <th>Unnamed: 63</th>\n",
       "      <th>Unnamed: 64</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Timestamp</td>\n",
       "      <td>Email Address</td>\n",
       "      <td>Your name</td>\n",
       "      <td>Grocery store</td>\n",
       "      <td>Grocery store street address</td>\n",
       "      <td>Product 1 quantity (kg)</td>\n",
       "      <td>Product 1 price (€)</td>\n",
       "      <td>Product 2 quantity (kg)</td>\n",
       "      <td>Product 2 price (€)</td>\n",
       "      <td>Product 3 quantity (kg)</td>\n",
       "      <td>...</td>\n",
       "      <td>Product 2 quantity (count)</td>\n",
       "      <td>Product 2 price (€)</td>\n",
       "      <td>Product 3 quantity (count)</td>\n",
       "      <td>Product 3 price (€)</td>\n",
       "      <td>Product 1 quantity (kg)</td>\n",
       "      <td>Product 1 price (€)</td>\n",
       "      <td>Product 2 quantity (kg)</td>\n",
       "      <td>Product 2 price (€)</td>\n",
       "      <td>Product 3 quantity (kg)</td>\n",
       "      <td>Product 3 price (€)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10/28/2019 13:14:59</td>\n",
       "      <td>brian.swanberg@minerva.kgi.edu</td>\n",
       "      <td>Brian Swanberg</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>Rummelsburger Str. 98</td>\n",
       "      <td>0.88</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.88</td>\n",
       "      <td>0.6</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>10</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10/29/2019 14:19:19</td>\n",
       "      <td>emma.stiefel@minerva.kgi.edu</td>\n",
       "      <td>Emma Stiefel</td>\n",
       "      <td>REWE</td>\n",
       "      <td>Karl-Marx-Straße 92-98</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1</td>\n",
       "      <td>13.9</td>\n",
       "      <td>1</td>\n",
       "      <td>9.99</td>\n",
       "      <td>1</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10/29/2019 21:22:30</td>\n",
       "      <td>taha@minerva.kgi.edu</td>\n",
       "      <td>Taha</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>Hermannstraße 72, 12049 Berlin, Germany</td>\n",
       "      <td>1</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.8</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>0.35</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 65 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Unnamed: 0                      Unnamed: 1      Unnamed: 2  \\\n",
       "0            Timestamp                   Email Address       Your name   \n",
       "1                  NaN                             NaN             NaN   \n",
       "2  10/28/2019 13:14:59  brian.swanberg@minerva.kgi.edu  Brian Swanberg   \n",
       "3  10/29/2019 14:19:19    emma.stiefel@minerva.kgi.edu    Emma Stiefel   \n",
       "4  10/29/2019 21:22:30            taha@minerva.kgi.edu            Taha   \n",
       "\n",
       "      Unnamed: 3                               Unnamed: 4  \\\n",
       "0  Grocery store             Grocery store street address   \n",
       "1            NaN                                      NaN   \n",
       "2           ALDI                    Rummelsburger Str. 98   \n",
       "3           REWE                   Karl-Marx-Straße 92-98   \n",
       "4           ALDI  Hermannstraße 72, 12049 Berlin, Germany   \n",
       "\n",
       "                    Apples           Unnamed: 6               Unnamed: 7  \\\n",
       "0  Product 1 quantity (kg)  Product 1 price (€)  Product 2 quantity (kg)   \n",
       "1                      NaN                  NaN                      NaN   \n",
       "2                     0.88                  2.2                        1   \n",
       "3                        1                 2.49                        1   \n",
       "4                        1                 2.99                        1   \n",
       "\n",
       "            Unnamed: 8               Unnamed: 9  ...  \\\n",
       "0  Product 2 price (€)  Product 3 quantity (kg)  ...   \n",
       "1                  NaN                      NaN  ...   \n",
       "2                 1.88                      0.6  ...   \n",
       "3                 1.49                        1  ...   \n",
       "4                 1.79                      0.8  ...   \n",
       "\n",
       "                  Unnamed: 55          Unnamed: 56  \\\n",
       "0  Product 2 quantity (count)  Product 2 price (€)   \n",
       "1                         NaN                  NaN   \n",
       "2                           6                 1.59   \n",
       "3                           1                 0.25   \n",
       "4                          10                 1.19   \n",
       "\n",
       "                  Unnamed: 57          Unnamed: 58          Chicken breasts  \\\n",
       "0  Product 3 quantity (count)  Product 3 price (€)  Product 1 quantity (kg)   \n",
       "1                         NaN                  NaN                      NaN   \n",
       "2                          10                 1.59                      0.6   \n",
       "3                           6                 1.59                        1   \n",
       "4                           6                 1.59                      0.6   \n",
       "\n",
       "           Unnamed: 60              Unnamed: 61          Unnamed: 62  \\\n",
       "0  Product 1 price (€)  Product 2 quantity (kg)  Product 2 price (€)   \n",
       "1                  NaN                      NaN                  NaN   \n",
       "2                 3.99                        1                 5.99   \n",
       "3                 13.9                        1                 9.99   \n",
       "4                 3.99                        1                 5.99   \n",
       "\n",
       "               Unnamed: 63          Unnamed: 64  \n",
       "0  Product 3 quantity (kg)  Product 3 price (€)  \n",
       "1                      NaN                  NaN  \n",
       "2                      NaN                  NaN  \n",
       "3                        1                 9.98  \n",
       "4                     0.35                 3.99  \n",
       "\n",
       "[5 rows x 65 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Read the CSV file that conatins all enteries as updated in Nov 7th\n",
    "\"\"\"\n",
    "rawdata = pd.read_csv(\"CS146 LBA data gathering (Fall 2019) (Responses) - Form Responses 1(1) .csv\")\n",
    "#Take a peak into the data\n",
    "rawdata.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Change the name of the columns and remove unnecssary info: TimeStamp and Email Address \n",
    "\"\"\"\n",
    "rawdata.columns = rawdata.iloc[0]\n",
    "rawdata = rawdata.drop([0,1], axis= 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "responcedata = rawdata.drop([\"Timestamp\", \"Email Address\"], axis= 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/pandas/core/frame.py:4025: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  return super(DataFrame, self).rename(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "responcedata.rename({'Grocery store street address': 'Supermarket'}, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Your name</th>\n",
       "      <th>Grocery store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>...</th>\n",
       "      <th>Product 2 quantity (count)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (count)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brian Swanberg</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>Rummelsburger Str. 98</td>\n",
       "      <td>0.88</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.88</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>10</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Emma Stiefel</td>\n",
       "      <td>REWE</td>\n",
       "      <td>Karl-Marx-Straße 92-98</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1</td>\n",
       "      <td>13.9</td>\n",
       "      <td>1</td>\n",
       "      <td>9.99</td>\n",
       "      <td>1</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Taha</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>Hermannstraße 72, 12049 Berlin, Germany</td>\n",
       "      <td>1</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>0.35</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Michael Hao Chen</td>\n",
       "      <td>Lidl</td>\n",
       "      <td>Lidl, Leipziger Str. 42</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>1.69</td>\n",
       "      <td>10</td>\n",
       "      <td>2.65</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.79</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Michael Hao Chen</td>\n",
       "      <td>REWE</td>\n",
       "      <td>REWE, Landsberger Allee 68D</td>\n",
       "      <td>0.65</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.19</td>\n",
       "      <td>1</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>2.29</td>\n",
       "      <td>12</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.41</td>\n",
       "      <td>5.34</td>\n",
       "      <td>0.249</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.285</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 63 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "0         Your name Grocery store                              Supermarket  \\\n",
       "2    Brian Swanberg          ALDI                    Rummelsburger Str. 98   \n",
       "3      Emma Stiefel          REWE                   Karl-Marx-Straße 92-98   \n",
       "4              Taha          ALDI  Hermannstraße 72, 12049 Berlin, Germany   \n",
       "5  Michael Hao Chen          Lidl                  Lidl, Leipziger Str. 42   \n",
       "6  Michael Hao Chen          REWE              REWE, Landsberger Allee 68D   \n",
       "\n",
       "0 Product 1 quantity (kg) Product 1 price (€) Product 2 quantity (kg)  \\\n",
       "2                    0.88                 2.2                       1   \n",
       "3                       1                2.49                       1   \n",
       "4                       1                2.99                       1   \n",
       "5                       1                1.79                    0.75   \n",
       "6                    0.65                2.49                       1   \n",
       "\n",
       "0 Product 2 price (€) Product 3 quantity (kg) Product 3 price (€)  \\\n",
       "2                1.88                     0.6                1.89   \n",
       "3                1.49                       1                2.49   \n",
       "4                1.79                     0.8                1.89   \n",
       "5                1.99                     0.8                1.89   \n",
       "6                2.19                       1                1.49   \n",
       "\n",
       "0 Product 1 quantity (kg)  ... Product 2 quantity (count) Product 2 price (€)  \\\n",
       "2                       1  ...                          6                1.59   \n",
       "3                       1  ...                          1                0.25   \n",
       "4                       1  ...                         10                1.19   \n",
       "5                       1  ...                         10                1.69   \n",
       "6                       1  ...                          6                2.29   \n",
       "\n",
       "0 Product 3 quantity (count) Product 3 price (€) Product 1 quantity (kg)  \\\n",
       "2                         10                1.59                     0.6   \n",
       "3                          6                1.59                       1   \n",
       "4                          6                1.59                     0.6   \n",
       "5                         10                2.65                     0.6   \n",
       "6                         12                1.99                    0.41   \n",
       "\n",
       "0 Product 1 price (€) Product 2 quantity (kg) Product 2 price (€)  \\\n",
       "2                3.99                       1                5.99   \n",
       "3                13.9                       1                9.99   \n",
       "4                3.99                       1                5.99   \n",
       "5                3.99                     0.4                2.79   \n",
       "6                5.34                   0.249                2.49   \n",
       "\n",
       "0 Product 3 quantity (kg) Product 3 price (€)  \n",
       "2                     NaN                 NaN  \n",
       "3                       1                9.98  \n",
       "4                    0.35                3.99  \n",
       "5                     NaN                 NaN  \n",
       "6                   0.285                8.52  \n",
       "\n",
       "[5 rows x 63 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "responcedata.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pre-processing the original assigmnent data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>2</th>\n",
       "      <th>Student name</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Berfin</td>\n",
       "      <td>ALDI, Eisenbahnstraße 42</td>\n",
       "      <td>Kreuzberg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Khoi</td>\n",
       "      <td>EDEKA, Annenstraße 4A</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sanny</td>\n",
       "      <td>EDEKA, Fischerinsel 12</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Ayo</td>\n",
       "      <td>REWE, Skalitzer Str. 134</td>\n",
       "      <td>Kreuzberg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Trang</td>\n",
       "      <td>Lidl, Heinrich-Heine-Straße 30</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "2 Student name                     Supermarket Neighborhood\n",
       "3       Berfin        ALDI, Eisenbahnstraße 42    Kreuzberg\n",
       "4         Khoi           EDEKA, Annenstraße 4A        Mitte\n",
       "5        Sanny          EDEKA, Fischerinsel 12        Mitte\n",
       "6          Ayo        REWE, Skalitzer Str. 134    Kreuzberg\n",
       "7        Trang  Lidl, Heinrich-Heine-Straße 30        Mitte"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Do the same pre-procesing steps to the initial assignment sheet.\n",
    "Change the name of the columns and remove the excess raw that\n",
    "the has NA values for each entery\n",
    "\"\"\"\n",
    "df = pd.read_csv(\"CS146, Fall 2019, LBA data collection - Berlin supermarkets.csv\")\n",
    "df.columns = df.iloc[2]\n",
    "df = df.drop(df.index[2])\n",
    "assigneddata = df.drop([0,1], axis = 0)\n",
    "assigneddata =  assigneddata.drop([\"Student index\",\"Map location\", \"GPS\", \"Estimated travel time (min)\"], axis = 1)\n",
    "assigneddata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>2</th>\n",
       "      <th>Student name</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Berfin</td>\n",
       "      <td>ALDI, Eisenbahnstraße 42</td>\n",
       "      <td>Kreuzberg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Khoi</td>\n",
       "      <td>EDEKA, Annenstraße 4A</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Sanny</td>\n",
       "      <td>EDEKA, Fischerinsel 12</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Ayo</td>\n",
       "      <td>REWE, Skalitzer Str. 134</td>\n",
       "      <td>Kreuzberg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Trang</td>\n",
       "      <td>Lidl, Heinrich-Heine-Straße 30</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "2 Student name                     Supermarket Neighborhood\n",
       "3       Berfin        ALDI, Eisenbahnstraße 42    Kreuzberg\n",
       "4         Khoi           EDEKA, Annenstraße 4A        Mitte\n",
       "5        Sanny          EDEKA, Fischerinsel 12        Mitte\n",
       "6          Ayo        REWE, Skalitzer Str. 134    Kreuzberg\n",
       "7        Trang  Lidl, Heinrich-Heine-Straße 30        Mitte"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Since we are trying to add the column of the neighborhood to the response data, \n",
    "we will match each entry in the response data to the supermarket address. To \n",
    "achieve maximized efficiency, we removed all numbers or special characters.\n",
    "\"\"\"\n",
    "assigneddata[[\"Supermarket\"]] = assigneddata[[\"Supermarket\"]].replace(r'(?:.*, )*(.*), [0-9]+.*', r'\\1', regex=True)\n",
    "display(assigneddata.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:5096: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n",
      "//anaconda3/lib/python3.7/site-packages/pandas/core/frame.py:3391: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[k1] = value[k2]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>2</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>eisenbahnstraße 42</td>\n",
       "      <td>Kreuzberg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>annenstraße 4a</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>fischerinsel 12</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "2         Supermarket Neighborhood\n",
       "3  eisenbahnstraße 42    Kreuzberg\n",
       "4      annenstraße 4a        Mitte\n",
       "5     fischerinsel 12        Mitte"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Your name</th>\n",
       "      <th>Grocery store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>...</th>\n",
       "      <th>Product 2 quantity (count)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (count)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brian Swanberg</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>rummelsburger str. 98</td>\n",
       "      <td>0.88</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.88</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>10</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Emma Stiefel</td>\n",
       "      <td>REWE</td>\n",
       "      <td>karl-marx-straße 92-98</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1</td>\n",
       "      <td>13.9</td>\n",
       "      <td>1</td>\n",
       "      <td>9.99</td>\n",
       "      <td>1</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Taha</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>hermannstraße 72</td>\n",
       "      <td>1</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>0.35</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 63 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "0       Your name Grocery store             Supermarket  \\\n",
       "2  Brian Swanberg          ALDI   rummelsburger str. 98   \n",
       "3    Emma Stiefel          REWE  karl-marx-straße 92-98   \n",
       "4            Taha          ALDI        hermannstraße 72   \n",
       "\n",
       "0 Product 1 quantity (kg) Product 1 price (€) Product 2 quantity (kg)  \\\n",
       "2                    0.88                 2.2                       1   \n",
       "3                       1                2.49                       1   \n",
       "4                       1                2.99                       1   \n",
       "\n",
       "0 Product 2 price (€) Product 3 quantity (kg) Product 3 price (€)  \\\n",
       "2                1.88                     0.6                1.89   \n",
       "3                1.49                       1                2.49   \n",
       "4                1.79                     0.8                1.89   \n",
       "\n",
       "0 Product 1 quantity (kg)  ... Product 2 quantity (count) Product 2 price (€)  \\\n",
       "2                       1  ...                          6                1.59   \n",
       "3                       1  ...                          1                0.25   \n",
       "4                       1  ...                         10                1.19   \n",
       "\n",
       "0 Product 3 quantity (count) Product 3 price (€) Product 1 quantity (kg)  \\\n",
       "2                         10                1.59                     0.6   \n",
       "3                          6                1.59                       1   \n",
       "4                          6                1.59                     0.6   \n",
       "\n",
       "0 Product 1 price (€) Product 2 quantity (kg) Product 2 price (€)  \\\n",
       "2                3.99                       1                5.99   \n",
       "3                13.9                       1                9.99   \n",
       "4                3.99                       1                5.99   \n",
       "\n",
       "0 Product 3 quantity (kg) Product 3 price (€)  \n",
       "2                     NaN                 NaN  \n",
       "3                       1                9.98  \n",
       "4                    0.35                3.99  \n",
       "\n",
       "[3 rows x 63 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# drop the unknown values in the pre-assigned data. \n",
    "#Make a new dataframe that contains only the important infromation for matching.\n",
    "neighborhoods = assigneddata[[\n",
    "    \"Student name\", \"Supermarket\", \"Neighborhood\"]].dropna()[[\"Supermarket\", \"Neighborhood\"]]\n",
    "#Make the supermarket data lower case to ease the matching \n",
    "neighborhoods.Supermarket = neighborhoods.Supermarket.str.lower()\n",
    "responcedata.Supermarket = responcedata.Supermarket.str.lower()\n",
    "#The assignment data had the name of the store in the address which is redundent. \n",
    "neighborhoods[[\"Supermarket\"]] = neighborhoods[[\"Supermarket\"]].replace(\n",
    "    r'(?:aldi|edeka|rewe|lidl), (.*)$', r'\\1', regex=True)\n",
    "responcedata[[\"Supermarket\"]] = responcedata[[\"Supermarket\"]].replace(\n",
    "    r'(?:aldi|edeka|rewe|lidl|berlin)(?: |, )(.*)$', r'\\1', regex=True).replace(\n",
    "    r'(?:.*, )*(.*), [0-9]+.*', r'\\1', regex=True)\n",
    "display(neighborhoods.head(3))\n",
    "display(responcedata.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Do the matching to merge the neighborhood data frame using matching on supermarket values. \n",
    "If the student's name is in the London list, assign the neighborhood to be London.\n",
    "\"\"\"\n",
    "meta_data_with_neighborhood = responcedata.merge(neighborhoods, how='left', on='Supermarket')\n",
    "london_mask = meta_data_with_neighborhood[[\"Your name\"]].isin(london_students).values.flatten()\n",
    "meta_data_with_neighborhood.loc[london_mask, \"Neighborhood\"] = \"London\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Handle each of the enteries that were not stated in the assigned data.\n",
    "Seoul and San Francisco is handled by the following lines of code.\n",
    "\"\"\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Your name\"] == \"Vy Tran\", \"Neighborhood\"] = \"Seoul\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Grocery store\"] == \"Safeway\", \"Neighborhood\"] = \"San Francisco\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "These rows don't have a neighborhood :\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Your name</th>\n",
       "      <th>Grocery store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>...</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (count)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Emma Stiefel</td>\n",
       "      <td>EDEKA</td>\n",
       "      <td>grunerstraße 20</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3.99</td>\n",
       "      <td>6</td>\n",
       "      <td>2.89</td>\n",
       "      <td>1</td>\n",
       "      <td>29.9</td>\n",
       "      <td>1</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1</td>\n",
       "      <td>6.65</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Berfin</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>berlin kreuzberg straße 39</td>\n",
       "      <td>1</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.99</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.79</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Berfin Karaman</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>eisenbahnstrasse 42</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.95</td>\n",
       "      <td>2</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.35</td>\n",
       "      <td>2.99</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Dennis Kageni</td>\n",
       "      <td>Lidl</td>\n",
       "      <td>friedenstraße 94a</td>\n",
       "      <td>2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.7</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.65</td>\n",
       "      <td>6</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.8</td>\n",
       "      <td>4.69</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Yanal</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>frankfurter allee 117</td>\n",
       "      <td>1</td>\n",
       "      <td>1.39</td>\n",
       "      <td>2</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.69</td>\n",
       "      <td>10</td>\n",
       "      <td>1.19</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Yanal</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>landsberger allee 277</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>1</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.69</td>\n",
       "      <td>10</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Ahmed</td>\n",
       "      <td>EDEKA</td>\n",
       "      <td>kottbusser damm 80</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>9.99</td>\n",
       "      <td>1</td>\n",
       "      <td>8.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>Tom Kremer</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>invalidenstraße 59</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>6.99</td>\n",
       "      <td>0.6</td>\n",
       "      <td>4.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Ebuka</td>\n",
       "      <td>Lidl</td>\n",
       "      <td>frankfurter allee 212</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>0.7</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.59</td>\n",
       "      <td>10</td>\n",
       "      <td>2.65</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.99</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>Ebuka</td>\n",
       "      <td>REWE</td>\n",
       "      <td>litfaß-platz 4</td>\n",
       "      <td>0.65</td>\n",
       "      <td>2.69</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.245</td>\n",
       "      <td>3.18</td>\n",
       "      <td>0.309</td>\n",
       "      <td>4.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 64 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Your name Grocery store                 Supermarket  \\\n",
       "12     Emma Stiefel         EDEKA             grunerstraße 20   \n",
       "23          Berfin           ALDI  berlin kreuzberg straße 39   \n",
       "24  Berfin Karaman           ALDI         eisenbahnstrasse 42   \n",
       "26    Dennis Kageni          Lidl           friedenstraße 94a   \n",
       "37            Yanal          ALDI       frankfurter allee 117   \n",
       "39            Yanal          ALDI       landsberger allee 277   \n",
       "42            Ahmed         EDEKA          kottbusser damm 80   \n",
       "61       Tom Kremer          ALDI          invalidenstraße 59   \n",
       "65            Ebuka          Lidl       frankfurter allee 212   \n",
       "67            Ebuka          REWE              litfaß-platz 4   \n",
       "\n",
       "   Product 1 quantity (kg) Product 1 price (€) Product 2 quantity (kg)  \\\n",
       "12                       1                2.49                       1   \n",
       "23                       1                2.99                       1   \n",
       "24                     0.6                1.95                       2   \n",
       "26                       2                2.49                     0.7   \n",
       "37                       1                1.39                       2   \n",
       "39                       1                2.69                       1   \n",
       "42                       1                2.49                       1   \n",
       "61                       1                2.49                       2   \n",
       "65                       1                1.79                     0.7   \n",
       "67                    0.65                2.69                       1   \n",
       "\n",
       "   Product 2 price (€) Product 3 quantity (kg) Product 3 price (€)  \\\n",
       "12                2.49                       1                1.99   \n",
       "23                1.79                       1                2.29   \n",
       "24                2.29                       1                1.39   \n",
       "26                2.29                       1                1.99   \n",
       "37                2.29                       1                1.79   \n",
       "39                1.89                       1                1.79   \n",
       "42                2.49                       1                1.66   \n",
       "61                2.49                       1                1.99   \n",
       "65                2.29                       1                2.49   \n",
       "67                2.49                       1                1.49   \n",
       "\n",
       "   Product 1 quantity (kg)  ... Product 2 price (€)  \\\n",
       "12                       1  ...                3.99   \n",
       "23                       1  ...                1.19   \n",
       "24                       1  ...                1.19   \n",
       "26                       1  ...                2.65   \n",
       "37                       1  ...                1.69   \n",
       "39                       1  ...                1.69   \n",
       "42                       1  ...                1.19   \n",
       "61                       1  ...                1.19   \n",
       "65                       1  ...                1.59   \n",
       "67                       1  ...                1.59   \n",
       "\n",
       "   Product 3 quantity (count) Product 3 price (€) Product 1 quantity (kg)  \\\n",
       "12                          6                2.89                       1   \n",
       "23                          6                1.59                     0.6   \n",
       "24                          6                1.59                    0.35   \n",
       "26                          6                0.99                     0.8   \n",
       "37                         10                1.19                     0.6   \n",
       "39                         10                1.59                     0.6   \n",
       "42                          6                1.49                       1   \n",
       "61                        NaN                 NaN                       1   \n",
       "65                         10                2.65                     0.5   \n",
       "67                          6                1.29                   0.245   \n",
       "\n",
       "   Product 1 price (€) Product 2 quantity (kg) Product 2 price (€)  \\\n",
       "12                29.9                       1                 4.9   \n",
       "23                3.99                     0.4                2.99   \n",
       "24                2.99                     0.6                3.99   \n",
       "26                4.69                     0.6                2.99   \n",
       "37                3.99                       1                5.99   \n",
       "39                3.99                       1                5.99   \n",
       "42                9.99                       1                8.99   \n",
       "61                6.99                     0.6                4.99   \n",
       "65                2.99                     0.6                2.99   \n",
       "67                3.18                   0.309                4.01   \n",
       "\n",
       "   Product 3 quantity (kg) Product 3 price (€) Neighborhood  \n",
       "12                       1                6.65          NaN  \n",
       "23                     0.4                2.79          NaN  \n",
       "24                       1                5.99          NaN  \n",
       "26                     NaN                 NaN          NaN  \n",
       "37                     NaN                 NaN          NaN  \n",
       "39                     NaN                 NaN          NaN  \n",
       "42                     NaN                 NaN          NaN  \n",
       "61                     NaN                 NaN          NaN  \n",
       "65                       1                5.99          NaN  \n",
       "67                     NaN                 NaN          NaN  \n",
       "\n",
       "[10 rows x 64 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Print the rows that didn't have a neighborhood assigned to it. \n",
    "\"\"\"\n",
    "unmatched_rows = meta_data_with_neighborhood[meta_data_with_neighborhood.Neighborhood.isnull()]\n",
    "print(\"These rows don't have a neighborhood :\")\n",
    "display(unmatched_rows)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "White space in the each of the locations might have caused the issue with\n",
    "\"\"\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Supermarket\"].str.contains('kreuzberg straße 39', na=False), \"Neighborhood\"] = \"Schöneberg\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Supermarket\"].str.contains('gruner', na=False), \"Neighborhood\"] = \"Mitte\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Supermarket\"].str.contains('litfaß-platz', na=False), \"Neighborhood\"] = \"Mitte\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Supermarket\"].str.contains('invalidenstraße', na=False), \"Neighborhood\"] = \"Mitte\"\n",
    "meta_data_with_neighborhood.loc[\n",
    "    meta_data_with_neighborhood[\"Supermarket\"].str.contains('frankfurter allee', na=False), \"Neighborhood\"] = \"Lichtenberg\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "These rows don't have a neighborhood :\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Your name</th>\n",
       "      <th>Grocery store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>...</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (count)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Product 1 quantity (kg)</th>\n",
       "      <th>Product 1 price (€)</th>\n",
       "      <th>Product 2 quantity (kg)</th>\n",
       "      <th>Product 2 price (€)</th>\n",
       "      <th>Product 3 quantity (kg)</th>\n",
       "      <th>Product 3 price (€)</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Berfin Karaman</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>eisenbahnstrasse 42</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.95</td>\n",
       "      <td>2</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.35</td>\n",
       "      <td>2.99</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Dennis Kageni</td>\n",
       "      <td>Lidl</td>\n",
       "      <td>friedenstraße 94a</td>\n",
       "      <td>2</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.7</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.65</td>\n",
       "      <td>6</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.8</td>\n",
       "      <td>4.69</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Yanal</td>\n",
       "      <td>ALDI</td>\n",
       "      <td>landsberger allee 277</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>1</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.69</td>\n",
       "      <td>10</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0.6</td>\n",
       "      <td>3.99</td>\n",
       "      <td>1</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Ahmed</td>\n",
       "      <td>EDEKA</td>\n",
       "      <td>kottbusser damm 80</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1</td>\n",
       "      <td>9.99</td>\n",
       "      <td>1</td>\n",
       "      <td>8.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 64 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Your name Grocery store            Supermarket  \\\n",
       "24  Berfin Karaman           ALDI    eisenbahnstrasse 42   \n",
       "26    Dennis Kageni          Lidl      friedenstraße 94a   \n",
       "39            Yanal          ALDI  landsberger allee 277   \n",
       "42            Ahmed         EDEKA     kottbusser damm 80   \n",
       "\n",
       "   Product 1 quantity (kg) Product 1 price (€) Product 2 quantity (kg)  \\\n",
       "24                     0.6                1.95                       2   \n",
       "26                       2                2.49                     0.7   \n",
       "39                       1                2.69                       1   \n",
       "42                       1                2.49                       1   \n",
       "\n",
       "   Product 2 price (€) Product 3 quantity (kg) Product 3 price (€)  \\\n",
       "24                2.29                       1                1.39   \n",
       "26                2.29                       1                1.99   \n",
       "39                1.89                       1                1.79   \n",
       "42                2.49                       1                1.66   \n",
       "\n",
       "   Product 1 quantity (kg)  ... Product 2 price (€)  \\\n",
       "24                       1  ...                1.19   \n",
       "26                       1  ...                2.65   \n",
       "39                       1  ...                1.69   \n",
       "42                       1  ...                1.19   \n",
       "\n",
       "   Product 3 quantity (count) Product 3 price (€) Product 1 quantity (kg)  \\\n",
       "24                          6                1.59                    0.35   \n",
       "26                          6                0.99                     0.8   \n",
       "39                         10                1.59                     0.6   \n",
       "42                          6                1.49                       1   \n",
       "\n",
       "   Product 1 price (€) Product 2 quantity (kg) Product 2 price (€)  \\\n",
       "24                2.99                     0.6                3.99   \n",
       "26                4.69                     0.6                2.99   \n",
       "39                3.99                       1                5.99   \n",
       "42                9.99                       1                8.99   \n",
       "\n",
       "   Product 3 quantity (kg) Product 3 price (€) Neighborhood  \n",
       "24                       1                5.99          NaN  \n",
       "26                     NaN                 NaN          NaN  \n",
       "39                     NaN                 NaN          NaN  \n",
       "42                     NaN                 NaN          NaN  \n",
       "\n",
       "[4 rows x 64 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "unmatched_rows3 = meta_data_with_neighborhood[meta_data_with_neighborhood.Neighborhood.isnull()]\n",
    "print(\"These rows don't have a neighborhood :\")\n",
    "display(unmatched_rows3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "This function normalises the price for each of the products\n",
    "\"\"\"\n",
    "def normalise (df):\n",
    "    for i in range(3,63):\n",
    "        df.iloc[ : ,i]  = pd.to_numeric(df.iloc[ : ,i])\n",
    "    #Normalise the price of apples \n",
    "    for j in range(3,8,2):\n",
    "        quanitity1 = df.iloc[ : ,j]\n",
    "        cost1 = df.iloc[ : , j+1 ]\n",
    "        df[\"Price of Apples \" + str((j-1)//2)] = cost1/quanitity1\n",
    "    for k in range(9,14,2):\n",
    "        quanitity2 = df.iloc[ : ,k]\n",
    "        cost2 = df.iloc[ : , k+1 ]\n",
    "        df[\"Price of Bananas \" + str((k-7)//2)] = cost2/quanitity2\n",
    "    for l in range(15,20,2):\n",
    "        quanitity3 = df.iloc[ : ,l]\n",
    "        cost3 = df.iloc[ : , l+1 ]\n",
    "        df[\"Price of Tomatoes \" + str((l-13)//2)] = cost3/quanitity3\n",
    "    for m in range(21,26,2):\n",
    "        quanitity4 = df.iloc[ : ,m]\n",
    "        cost4 = df.iloc[ : , m+1 ]\n",
    "        df[\"Price of Potatoes \" + str((m-19)//2)] = cost4/quanitity4\n",
    "    for n in range(27,32,2):\n",
    "        quanitity5 = df.iloc[ : ,n]\n",
    "        cost5 = df.iloc[ : , n+1 ]\n",
    "        df[\"Price of Flour \" + str((n-25)//2)] = cost5/quanitity5\n",
    "    for o in range(33,38,2):\n",
    "        quanitity6 = df.iloc[ : ,o]\n",
    "        cost6 = df.iloc[ : , o+1 ]\n",
    "        df[\"Price of Rice \" + str((o-31)//2)] = cost6/quanitity6\n",
    "    for u in range(39,44,2):\n",
    "        quanitity7 = df.iloc[ : ,u]\n",
    "        cost7 = df.iloc[ : , u+1 ]\n",
    "        df[\"Price of Milk \" + str((u-37)//2)] = cost7/quanitity7\n",
    "    for v in range(45,50,2):\n",
    "        quanitity8 = df.iloc[ : ,v]\n",
    "        cost8 = df.iloc[ : , v+1 ]\n",
    "        df[\"Price of Butter \" + str((v-43)//2)] = cost8/quanitity8\n",
    "    for w in range(51,56,2):\n",
    "        quanitity9 = df.iloc[ : ,w]\n",
    "        cost9 = df.iloc[ : , w+1 ]\n",
    "        df[\"Price of Eggs \" + str((w-49)//2)] = cost9/quanitity9\n",
    "    for z in range(57,62,2):\n",
    "        quanitity10 = df.iloc[ : ,z]\n",
    "        cost10 = df.iloc[ : , z+1 ]\n",
    "        df[\"Price of Chicken Breasts \" + str((z-55)//2)] = cost10/quanitity10\n",
    "    return df\n",
    "    \n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grocery store</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Price of Apples 1</th>\n",
       "      <th>Price of Apples 2</th>\n",
       "      <th>Price of Apples 3</th>\n",
       "      <th>Price of Bananas 1</th>\n",
       "      <th>Price of Bananas 2</th>\n",
       "      <th>Price of Bananas 3</th>\n",
       "      <th>Price of Tomatoes 1</th>\n",
       "      <th>Price of Tomatoes 2</th>\n",
       "      <th>...</th>\n",
       "      <th>Price of Milk 3</th>\n",
       "      <th>Price of Butter 1</th>\n",
       "      <th>Price of Butter 2</th>\n",
       "      <th>Price of Butter 3</th>\n",
       "      <th>Price of Eggs 1</th>\n",
       "      <th>Price of Eggs 2</th>\n",
       "      <th>Price of Eggs 3</th>\n",
       "      <th>Price of Chicken Breasts 1</th>\n",
       "      <th>Price of Chicken Breasts 2</th>\n",
       "      <th>Price of Chicken Breasts 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALDI</td>\n",
       "      <td>Lichtenberg</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.88</td>\n",
       "      <td>3.15</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.52308</td>\n",
       "      <td>2.98</td>\n",
       "      <td>...</td>\n",
       "      <td>0.99</td>\n",
       "      <td>5.56</td>\n",
       "      <td>6.36</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.265</td>\n",
       "      <td>0.159</td>\n",
       "      <td>6.65</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>REWE</td>\n",
       "      <td>Neukölln</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.58</td>\n",
       "      <td>...</td>\n",
       "      <td>0.79</td>\n",
       "      <td>5.56</td>\n",
       "      <td>5.56</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.281667</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.265</td>\n",
       "      <td>13.9</td>\n",
       "      <td>9.99</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>REWE</td>\n",
       "      <td>Neukölln</td>\n",
       "      <td>2.49</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.58</td>\n",
       "      <td>...</td>\n",
       "      <td>0.79</td>\n",
       "      <td>5.56</td>\n",
       "      <td>5.56</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.281667</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.265</td>\n",
       "      <td>13.9</td>\n",
       "      <td>9.99</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALDI</td>\n",
       "      <td>Neukölln</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.3625</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.495</td>\n",
       "      <td>3.58</td>\n",
       "      <td>1.99</td>\n",
       "      <td>...</td>\n",
       "      <td>0.99</td>\n",
       "      <td>9.56</td>\n",
       "      <td>5.16</td>\n",
       "      <td>5.16</td>\n",
       "      <td>0.159</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.265</td>\n",
       "      <td>6.65</td>\n",
       "      <td>5.99</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lidl</td>\n",
       "      <td>Mitte</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.65333</td>\n",
       "      <td>2.3625</td>\n",
       "      <td>1.09</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7.11429</td>\n",
       "      <td>1.89</td>\n",
       "      <td>...</td>\n",
       "      <td>1.15</td>\n",
       "      <td>9.56</td>\n",
       "      <td>6.36</td>\n",
       "      <td>6.76</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.169</td>\n",
       "      <td>0.265</td>\n",
       "      <td>6.65</td>\n",
       "      <td>6.975</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Grocery store Neighborhood Price of Apples 1 Price of Apples 2  \\\n",
       "0          ALDI  Lichtenberg               2.5              1.88   \n",
       "1          REWE     Neukölln              2.49              1.49   \n",
       "2          REWE     Neukölln              2.49              1.49   \n",
       "3          ALDI     Neukölln              2.99              1.79   \n",
       "4          Lidl        Mitte              1.79           2.65333   \n",
       "\n",
       "  Price of Apples 3 Price of Bananas 1 Price of Bananas 2 Price of Bananas 3  \\\n",
       "0              3.15               1.69               0.99                NaN   \n",
       "1              2.49               0.99               1.69               1.59   \n",
       "2              2.49               0.99               1.69               1.59   \n",
       "3            2.3625               1.15               1.69              1.495   \n",
       "4            2.3625               1.09               1.69               1.19   \n",
       "\n",
       "  Price of Tomatoes 1 Price of Tomatoes 2  ... Price of Milk 3  \\\n",
       "0             3.52308                2.98  ...            0.99   \n",
       "1                 6.9                4.58  ...            0.79   \n",
       "2                 6.9                4.58  ...            0.79   \n",
       "3                3.58                1.99  ...            0.99   \n",
       "4             7.11429                1.89  ...            1.15   \n",
       "\n",
       "  Price of Butter 1 Price of Butter 2 Price of Butter 3 Price of Eggs 1  \\\n",
       "0              5.56              6.36              9.56           0.119   \n",
       "1              5.56              5.56              9.56        0.281667   \n",
       "2              5.56              5.56              9.56        0.281667   \n",
       "3              9.56              5.16              5.16           0.159   \n",
       "4              9.56              6.36              6.76           0.119   \n",
       "\n",
       "  Price of Eggs 2 Price of Eggs 3 Price of Chicken Breasts 1  \\\n",
       "0           0.265           0.159                       6.65   \n",
       "1            0.25           0.265                       13.9   \n",
       "2            0.25           0.265                       13.9   \n",
       "3           0.119           0.265                       6.65   \n",
       "4           0.169           0.265                       6.65   \n",
       "\n",
       "  Price of Chicken Breasts 2 Price of Chicken Breasts 3  \n",
       "0                       5.99                        NaN  \n",
       "1                       9.99                       9.98  \n",
       "2                       9.99                       9.98  \n",
       "3                       5.99                       11.4  \n",
       "4                      6.975                        NaN  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#normalise the prices and have them in new columns \n",
    "normalised = normalise(meta_data_with_neighborhood)\n",
    "#drop the rest of the columns- the original ones with prices\n",
    "normalised_full = normalised.drop(normalised.iloc[:, 3:63], axis=1)\n",
    "#drop the name and the location of the supermarket columns \n",
    "normalised_full2 = normalised_full.drop(['Your name', 'Supermarket'], axis=1, inplace=False)\n",
    "normalised_full2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price of Apples 1</th>\n",
       "      <th>Price of Apples 2</th>\n",
       "      <th>Price of Apples 3</th>\n",
       "      <th>Price of Bananas 1</th>\n",
       "      <th>Price of Bananas 2</th>\n",
       "      <th>Price of Bananas 3</th>\n",
       "      <th>Price of Tomatoes 1</th>\n",
       "      <th>Price of Tomatoes 2</th>\n",
       "      <th>Price of Tomatoes 3</th>\n",
       "      <th>Price of Potatoes 1</th>\n",
       "      <th>...</th>\n",
       "      <th>Price of Milk 3</th>\n",
       "      <th>Price of Butter 1</th>\n",
       "      <th>Price of Butter 2</th>\n",
       "      <th>Price of Butter 3</th>\n",
       "      <th>Price of Eggs 1</th>\n",
       "      <th>Price of Eggs 2</th>\n",
       "      <th>Price of Eggs 3</th>\n",
       "      <th>Price of Chicken Breasts 1</th>\n",
       "      <th>Price of Chicken Breasts 2</th>\n",
       "      <th>Price of Chicken Breasts 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>1.88</td>\n",
       "      <td>3.15</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.52308</td>\n",
       "      <td>2.98</td>\n",
       "      <td>1.89</td>\n",
       "      <td>0.556</td>\n",
       "      <td>...</td>\n",
       "      <td>0.99</td>\n",
       "      <td>5.56</td>\n",
       "      <td>6.36</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.265</td>\n",
       "      <td>0.159</td>\n",
       "      <td>6.65</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.49</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.58</td>\n",
       "      <td>5.68571</td>\n",
       "      <td>0.563333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.79</td>\n",
       "      <td>5.56</td>\n",
       "      <td>5.56</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.281667</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.265</td>\n",
       "      <td>13.9</td>\n",
       "      <td>9.99</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.49</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.58</td>\n",
       "      <td>5.68571</td>\n",
       "      <td>0.563333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.79</td>\n",
       "      <td>5.56</td>\n",
       "      <td>5.56</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.281667</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.265</td>\n",
       "      <td>13.9</td>\n",
       "      <td>9.99</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.99</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.3625</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.495</td>\n",
       "      <td>3.58</td>\n",
       "      <td>1.99</td>\n",
       "      <td>4.58</td>\n",
       "      <td>0.556</td>\n",
       "      <td>...</td>\n",
       "      <td>0.99</td>\n",
       "      <td>9.56</td>\n",
       "      <td>5.16</td>\n",
       "      <td>5.16</td>\n",
       "      <td>0.159</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.265</td>\n",
       "      <td>6.65</td>\n",
       "      <td>5.99</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.79</td>\n",
       "      <td>2.65333</td>\n",
       "      <td>2.3625</td>\n",
       "      <td>1.09</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7.11429</td>\n",
       "      <td>1.89</td>\n",
       "      <td>3.58</td>\n",
       "      <td>0.75</td>\n",
       "      <td>...</td>\n",
       "      <td>1.15</td>\n",
       "      <td>9.56</td>\n",
       "      <td>6.36</td>\n",
       "      <td>6.76</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.169</td>\n",
       "      <td>0.265</td>\n",
       "      <td>6.65</td>\n",
       "      <td>6.975</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Price of Apples 1 Price of Apples 2 Price of Apples 3 Price of Bananas 1  \\\n",
       "0               2.5              1.88              3.15               1.69   \n",
       "1              2.49              1.49              2.49               0.99   \n",
       "2              2.49              1.49              2.49               0.99   \n",
       "3              2.99              1.79            2.3625               1.15   \n",
       "4              1.79           2.65333            2.3625               1.09   \n",
       "\n",
       "  Price of Bananas 2 Price of Bananas 3 Price of Tomatoes 1  \\\n",
       "0               0.99                NaN             3.52308   \n",
       "1               1.69               1.59                 6.9   \n",
       "2               1.69               1.59                 6.9   \n",
       "3               1.69              1.495                3.58   \n",
       "4               1.69               1.19             7.11429   \n",
       "\n",
       "  Price of Tomatoes 2 Price of Tomatoes 3 Price of Potatoes 1  ...  \\\n",
       "0                2.98                1.89               0.556  ...   \n",
       "1                4.58             5.68571            0.563333  ...   \n",
       "2                4.58             5.68571            0.563333  ...   \n",
       "3                1.99                4.58               0.556  ...   \n",
       "4                1.89                3.58                0.75  ...   \n",
       "\n",
       "  Price of Milk 3 Price of Butter 1 Price of Butter 2 Price of Butter 3  \\\n",
       "0            0.99              5.56              6.36              9.56   \n",
       "1            0.79              5.56              5.56              9.56   \n",
       "2            0.79              5.56              5.56              9.56   \n",
       "3            0.99              9.56              5.16              5.16   \n",
       "4            1.15              9.56              6.36              6.76   \n",
       "\n",
       "  Price of Eggs 1 Price of Eggs 2 Price of Eggs 3 Price of Chicken Breasts 1  \\\n",
       "0           0.119           0.265           0.159                       6.65   \n",
       "1        0.281667            0.25           0.265                       13.9   \n",
       "2        0.281667            0.25           0.265                       13.9   \n",
       "3           0.159           0.119           0.265                       6.65   \n",
       "4           0.119           0.169           0.265                       6.65   \n",
       "\n",
       "  Price of Chicken Breasts 2 Price of Chicken Breasts 3  \n",
       "0                       5.99                        NaN  \n",
       "1                       9.99                       9.98  \n",
       "2                       9.99                       9.98  \n",
       "3                       5.99                       11.4  \n",
       "4                      6.975                        NaN  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Product = normalised_full2.iloc[:,2::1]\n",
    "df_Product.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price of Apples 1</th>\n",
       "      <th>Price of Apples 2</th>\n",
       "      <th>Price of Apples 3</th>\n",
       "      <th>Price of Bananas 1</th>\n",
       "      <th>Price of Bananas 2</th>\n",
       "      <th>Price of Bananas 3</th>\n",
       "      <th>Price of Tomatoes 1</th>\n",
       "      <th>Price of Tomatoes 2</th>\n",
       "      <th>Price of Tomatoes 3</th>\n",
       "      <th>Price of Potatoes 1</th>\n",
       "      <th>...</th>\n",
       "      <th>Price of Milk 3</th>\n",
       "      <th>Price of Butter 1</th>\n",
       "      <th>Price of Butter 2</th>\n",
       "      <th>Price of Butter 3</th>\n",
       "      <th>Price of Eggs 1</th>\n",
       "      <th>Price of Eggs 2</th>\n",
       "      <th>Price of Eggs 3</th>\n",
       "      <th>Price of Chicken Breasts 1</th>\n",
       "      <th>Price of Chicken Breasts 2</th>\n",
       "      <th>Price of Chicken Breasts 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>1.88</td>\n",
       "      <td>3.15</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.52308</td>\n",
       "      <td>2.98</td>\n",
       "      <td>1.89</td>\n",
       "      <td>0.556</td>\n",
       "      <td>...</td>\n",
       "      <td>0.99</td>\n",
       "      <td>5.56</td>\n",
       "      <td>6.36</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.265</td>\n",
       "      <td>0.159</td>\n",
       "      <td>6.65</td>\n",
       "      <td>5.99</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.49</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.58</td>\n",
       "      <td>5.68571</td>\n",
       "      <td>0.563333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.79</td>\n",
       "      <td>5.56</td>\n",
       "      <td>5.56</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.281667</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.265</td>\n",
       "      <td>13.9</td>\n",
       "      <td>9.99</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.49</td>\n",
       "      <td>1.49</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.59</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.58</td>\n",
       "      <td>5.68571</td>\n",
       "      <td>0.563333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.79</td>\n",
       "      <td>5.56</td>\n",
       "      <td>5.56</td>\n",
       "      <td>9.56</td>\n",
       "      <td>0.281667</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.265</td>\n",
       "      <td>13.9</td>\n",
       "      <td>9.99</td>\n",
       "      <td>9.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.99</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.3625</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.495</td>\n",
       "      <td>3.58</td>\n",
       "      <td>1.99</td>\n",
       "      <td>4.58</td>\n",
       "      <td>0.556</td>\n",
       "      <td>...</td>\n",
       "      <td>0.99</td>\n",
       "      <td>9.56</td>\n",
       "      <td>5.16</td>\n",
       "      <td>5.16</td>\n",
       "      <td>0.159</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.265</td>\n",
       "      <td>6.65</td>\n",
       "      <td>5.99</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.79</td>\n",
       "      <td>2.65333</td>\n",
       "      <td>2.3625</td>\n",
       "      <td>1.09</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7.11429</td>\n",
       "      <td>1.89</td>\n",
       "      <td>3.58</td>\n",
       "      <td>0.75</td>\n",
       "      <td>...</td>\n",
       "      <td>1.15</td>\n",
       "      <td>9.56</td>\n",
       "      <td>6.36</td>\n",
       "      <td>6.76</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.169</td>\n",
       "      <td>0.265</td>\n",
       "      <td>6.65</td>\n",
       "      <td>6.975</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Price of Apples 1 Price of Apples 2 Price of Apples 3 Price of Bananas 1  \\\n",
       "0               2.5              1.88              3.15               1.69   \n",
       "1              2.49              1.49              2.49               0.99   \n",
       "2              2.49              1.49              2.49               0.99   \n",
       "3              2.99              1.79            2.3625               1.15   \n",
       "4              1.79           2.65333            2.3625               1.09   \n",
       "\n",
       "  Price of Bananas 2 Price of Bananas 3 Price of Tomatoes 1  \\\n",
       "0               0.99                NaN             3.52308   \n",
       "1               1.69               1.59                 6.9   \n",
       "2               1.69               1.59                 6.9   \n",
       "3               1.69              1.495                3.58   \n",
       "4               1.69               1.19             7.11429   \n",
       "\n",
       "  Price of Tomatoes 2 Price of Tomatoes 3 Price of Potatoes 1  ...  \\\n",
       "0                2.98                1.89               0.556  ...   \n",
       "1                4.58             5.68571            0.563333  ...   \n",
       "2                4.58             5.68571            0.563333  ...   \n",
       "3                1.99                4.58               0.556  ...   \n",
       "4                1.89                3.58                0.75  ...   \n",
       "\n",
       "  Price of Milk 3 Price of Butter 1 Price of Butter 2 Price of Butter 3  \\\n",
       "0            0.99              5.56              6.36              9.56   \n",
       "1            0.79              5.56              5.56              9.56   \n",
       "2            0.79              5.56              5.56              9.56   \n",
       "3            0.99              9.56              5.16              5.16   \n",
       "4            1.15              9.56              6.36              6.76   \n",
       "\n",
       "  Price of Eggs 1 Price of Eggs 2 Price of Eggs 3 Price of Chicken Breasts 1  \\\n",
       "0           0.119           0.265           0.159                       6.65   \n",
       "1        0.281667            0.25           0.265                       13.9   \n",
       "2        0.281667            0.25           0.265                       13.9   \n",
       "3           0.159           0.119           0.265                       6.65   \n",
       "4           0.119           0.169           0.265                       6.65   \n",
       "\n",
       "  Price of Chicken Breasts 2 Price of Chicken Breasts 3  \n",
       "0                       5.99                        NaN  \n",
       "1                       9.99                       9.98  \n",
       "2                       9.99                       9.98  \n",
       "3                       5.99                       11.4  \n",
       "4                      6.975                        NaN  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#isolate the price columns in a sperate dataframe \n",
    "df_Product = normalised_full2.iloc[:,2::1]\n",
    "df_Product.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product</th>\n",
       "      <th>Product Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Price of Apples 1</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Price of Apples 1</td>\n",
       "      <td>2.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Price of Apples 1</td>\n",
       "      <td>2.49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Product Product Price\n",
       "0  Price of Apples 1           2.5\n",
       "1  Price of Apples 1          2.49\n",
       "2  Price of Apples 1          2.49"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Product_Price = pd.melt(df_Product).rename(\n",
    "    columns={\"value\":\"Product Price\"}).rename(\n",
    "    columns={\"variable\":\"Product\"})\n",
    "df_Product_Price.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product</th>\n",
       "      <th>Product Price</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Store_Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Apples</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Lichtenberg</td>\n",
       "      <td>ALDI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Apples</td>\n",
       "      <td>2.49</td>\n",
       "      <td>Neukölln</td>\n",
       "      <td>REWE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Apples</td>\n",
       "      <td>2.49</td>\n",
       "      <td>Neukölln</td>\n",
       "      <td>REWE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Product Product Price Neighborhood Store_Name\n",
       "0   Apples            2.5  Lichtenberg       ALDI\n",
       "1   Apples           2.49     Neukölln       REWE\n",
       "2   Apples           2.49     Neukölln       REWE"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#change the shape of the store brands and neighborhood ones.\n",
    "neighborhood_column = list(meta_data_with_neighborhood.Neighborhood.values.astype(str)) * 10 * 3\n",
    "stores_brand_column = list(meta_data_with_neighborhood[\"Grocery store\"].values.flatten().astype(str)) * 10 * 3\n",
    "#connected the product prices with the neighborhood and the store brands. \n",
    "df_full_info = pd.concat([df_Product_Price, \n",
    "                      pd.DataFrame({'Neighborhood' : neighborhood_column}), \n",
    "                          pd.DataFrame({'Store_Name' : stores_brand_column})],axis = 1)\n",
    "# change the values from \"Price of Apples 1\" to \"Apples\" \n",
    "df_full_info[\"Product\"] = df_full_info[\"Product\"].replace(       # Raplace product value with numbers\n",
    "    r'Price of', '', regex=True).replace(       # Raplace product value with numbers\n",
    "    r'[0-9]', '', regex=True)\n",
    "df_full_info[\"Store_Name\"]\n",
    "#There are some inconsistencies in the store names that will effect creating the dictionary values\n",
    "#Standlise the name for each store for that purpose. \n",
    "df_full_info.loc[\n",
    "    df_full_info[\"Store_Name\"].str.contains('Sainsbury', na=False, case = False), \"Store_Name\"] = \"Sainsbury's\"\n",
    "df_full_info.loc[\n",
    "    df_full_info[\"Store_Name\"].str.contains('Waitrose', na=False, case = False), \"Store_Name\"] = \"Waitrose & Partners\"\n",
    "df_full_info.loc[\n",
    "    df_full_info[\"Store_Name\"].str.contains('Tesco', na=False, case = False), \"Store_Name\"] = \"Tesco Express\"\n",
    "df_full_info.loc[\n",
    "    df_full_info[\"Neighborhood\"].str.contains('NaN', na=False, case = False), \"Neighborhood\"] = np.nan\n",
    "df_valid_full_info = df_full_info.dropna().reset_index(drop=True)\n",
    "df_valid_full_info.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 10 unique values in the Product column.\n",
      "There are 9 unique values in the Store_Name column.\n",
      "There are 12 unique values in the Neighborhood column.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product</th>\n",
       "      <th>Product Price</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Store_Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2.49</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2.99</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1.79</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Product Product Price Neighborhood Store_Name\n",
       "0       1           2.5            1          1\n",
       "1       1          2.49            2          2\n",
       "2       1          2.49            2          2\n",
       "3       1          2.99            2          1\n",
       "4       1          1.79            3          3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''\n",
    "This function encodes any column in any data frame as an input. \n",
    "It assigns different numbers for each unique value found in these columns. \n",
    "    \n",
    "'''\n",
    "\n",
    "def IDfy(df, columns):\n",
    "    mapper = {}\n",
    "    for column in columns:\n",
    "        mapper[column] = {} \n",
    "        unique_values = list(df[column].unique())\n",
    "        \n",
    "        # Assign the ID of 0 to the exception\n",
    "        # Handle other IDs normally\n",
    "        for i, key in enumerate(unique_values):\n",
    "            mapper[column][i + 1] = key\n",
    "            df.loc[df[column].values == key, column] = i + 1\n",
    "            \n",
    "        print(\"There are {:d} unique values in the {:s} column.\".format(len(df[column].unique()), column))    \n",
    "    return(df, mapper)\n",
    "\n",
    "df, mapper = IDfy(df_valid_full_info.copy(), \n",
    "                  [\"Product\", \"Store_Name\", \"Neighborhood\"])\n",
    "\n",
    "display(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:pystan:COMPILING THE C++ CODE FOR MODEL anon_model_552a02c65361f9b6e19d3b9d7ba03a74 NOW.\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Statistical Modeling section.\n",
    "'''\n",
    "\n",
    "stan_code = \"\"\"\n",
    "\n",
    "// The data block contains all known quantities - typically the observed\n",
    "// data and any constant hyperparameters.\n",
    "data {\n",
    "    int<lower=0> n_data;                         // number of data\n",
    "    int<lower=0> n_products;                     // number of products\n",
    "    int<lower=0> n_store_brands;                 // number of store brands\n",
    "    int<lower=0> n_neighborhoods;                // number of neighborhoods\n",
    "    int<lower=1> product_id[n_data];             // product ids \n",
    "    int<lower=1> neighborhood_id[n_data];        // neighborhood ids\n",
    "    int<lower=1> store_id[n_data];               // store brand ids\n",
    "    real<lower=0> prices[n_data];                // prices\n",
    "}\n",
    "\n",
    "// The parameters block contains all unknown quantities - typically the\n",
    "// parameters of the model. Stan will generate samples from the posterior\n",
    "// distributions over all parameters.\n",
    "parameters {\n",
    "    real<lower=0> base_price[n_products];                    // base price of the product\n",
    "    real<lower=0> store_multiplier[n_store_brands];          // store brande multiplier\n",
    "    real<lower=0> neighborhood_multiplier[n_neighborhoods];  // neighborhood multiplier\n",
    "    real<lower=0> sigma;                                // standard deviation of the normal likelihood function\n",
    "}\n",
    "\n",
    "// The model block contains all probability distributions in the model.\n",
    "// This of this as specifying the generative model for the scenario.\n",
    "model {\n",
    " \n",
    "    // Priors\n",
    "    base_price ~ cauchy(0, 100);\n",
    "    store_multiplier ~ lognormal(0, 0.5);\n",
    "    neighborhood_multiplier ~ lognormal(0, 0.5);\n",
    "    sigma ~ inv_gamma(3, 0.25);\n",
    "\n",
    "    // Price Model\n",
    "    for (i in 1:n_data) {\n",
    "    \n",
    "        // If the product brand is known\n",
    "            prices[i] ~ normal(base_price[product_id[i]]*\\\n",
    "                               store_multiplier[store_id[i]]*\\\n",
    "                               neighborhood_multiplier[neighborhood_id[i]], sigma);\n",
    "    }\n",
    "}\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "stan_model = pystan.StanModel(model_code=stan_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:pystan:COMPILING THE C++ CODE FOR MODEL anon_model_552a02c65361f9b6e19d3b9d7ba03a74 NOW.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "stan_model = pystan.StanModel(model_code=stan_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "stan_data = {\n",
    "    \"n_data\" : df.shape[0],\n",
    "    \"n_products\" : len(df[\"Product\"].unique()),\n",
    "    \"n_store_brands\" : len(df[\"Store_Name\"].unique()),\n",
    "    \"n_neighborhoods\" : len(df[\"Neighborhood\"].unique()),\n",
    "    \"product_id\" : list(df[\"Product\"]),\n",
    "    \"neighborhood_id\" : list(df[\"Neighborhood\"]),\n",
    "    \"store_id\" : list(df[\"Store_Name\"]),\n",
    "    \"prices\" : list(df[\"Product Price\"])\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = stan_model.sampling(data=stan_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inference for Stan model: anon_model_552a02c65361f9b6e19d3b9d7ba03a74.\n",
      "4 chains, each with iter=2000; warmup=1000; thin=1; \n",
      "post-warmup draws per chain=1000, total post-warmup draws=4000.\n",
      "\n",
      "                              mean se_mean     sd   2.5%    25%    50%    75%  97.5%  n_eff   Rhat\n",
      "base_price[1]                 5.35    0.04   1.27   3.27   4.44   5.22    6.1   8.28   1150    1.0\n",
      "base_price[2]                  3.9    0.03   0.96   2.33   3.21   3.81   4.46    6.1   1240    1.0\n",
      "base_price[3]                 8.43    0.06   1.96   5.23   7.03   8.22   9.62  12.86   1081    1.0\n",
      "base_price[4]                 2.76    0.02   0.73   1.59   2.23   2.68   3.19   4.38   1244    1.0\n",
      "base_price[5]                  2.4    0.02   0.66   1.34   1.93   2.31   2.79   3.92   1321    1.0\n",
      "base_price[6]                 6.84    0.05    1.6   4.19   5.69   6.67   7.78   10.5   1122    1.0\n",
      "base_price[7]                 2.17    0.02    0.6    1.2   1.73    2.1   2.51   3.55   1350    1.0\n",
      "base_price[8]                15.95    0.11   3.68    9.9  13.29  15.57  18.16  24.38   1081    1.0\n",
      "base_price[9]                 0.56  7.6e-3   0.32   0.05   0.33   0.52   0.76    1.3   1810    1.0\n",
      "base_price[10]               17.83    0.12    4.1  11.14  14.87  17.41  20.29  27.09   1079    1.0\n",
      "store_multiplier[1]           0.52  3.2e-3   0.12   0.34   0.44   0.51   0.59   0.79   1322    1.0\n",
      "store_multiplier[2]           0.68  4.2e-3   0.15   0.44   0.57   0.67   0.77   1.03   1284    1.0\n",
      "store_multiplier[3]           0.53  3.2e-3   0.12   0.34   0.44   0.52    0.6   0.79   1335    1.0\n",
      "store_multiplier[4]           0.75  4.8e-3    0.2   0.45   0.61   0.72   0.86   1.21   1743    1.0\n",
      "store_multiplier[5]           0.78  4.7e-3   0.17    0.5   0.65   0.76   0.88   1.17   1304    1.0\n",
      "store_multiplier[6]            0.9  5.7e-3   0.24   0.53   0.73   0.86   1.03   1.44   1787    1.0\n",
      "store_multiplier[7]           0.87  6.6e-3   0.34   0.39   0.63   0.82   1.05   1.69   2617    1.0\n",
      "store_multiplier[8]           1.22  8.7e-3   0.47   0.56    0.9   1.14   1.47   2.37   2841    1.0\n",
      "store_multiplier[9]            1.1  6.9e-3   0.29   0.65   0.89   1.06   1.26   1.77   1762    1.0\n",
      "neighborhood_multiplier[1]    0.76  3.3e-3   0.12   0.56   0.67   0.75   0.83   1.02   1312    1.0\n",
      "neighborhood_multiplier[2]    0.82  3.5e-3   0.13    0.6   0.73   0.81    0.9   1.11   1410    1.0\n",
      "neighborhood_multiplier[3]    0.84  3.6e-3   0.13   0.62   0.74   0.83   0.92   1.13   1343    1.0\n",
      "neighborhood_multiplier[4]    0.74  3.2e-3   0.12   0.53   0.66   0.73   0.81    1.0   1410    1.0\n",
      "neighborhood_multiplier[5]    0.69  5.1e-3   0.22   0.37   0.54   0.66   0.81   1.21   1839    1.0\n",
      "neighborhood_multiplier[6]    0.86  6.8e-3   0.33   0.38   0.61    0.8   1.03   1.66   2422    1.0\n",
      "neighborhood_multiplier[7]    0.79  3.4e-3   0.13   0.58    0.7   0.78   0.87   1.08   1404    1.0\n",
      "neighborhood_multiplier[8]    0.86  3.8e-3   0.14   0.63   0.76   0.85   0.95   1.17   1354    1.0\n",
      "neighborhood_multiplier[9]    0.72  3.2e-3   0.12   0.51   0.64   0.71    0.8    1.0   1467    1.0\n",
      "neighborhood_multiplier[10]   1.22  8.7e-3   0.45   0.56    0.9   1.13   1.45   2.33   2734    1.0\n",
      "neighborhood_multiplier[11]   0.92  3.9e-3   0.15   0.67   0.82   0.91   1.01   1.25   1422    1.0\n",
      "neighborhood_multiplier[12]   0.87  4.2e-3   0.19   0.55   0.73   0.86   0.98   1.28   2052    1.0\n",
      "sigma                         2.82  6.3e-4   0.04   2.74   2.79   2.82   2.84    2.9   4151    1.0\n",
      "lp__                         -3772    0.12   4.16  -3781  -3775  -3772  -3769  -3764   1233    1.0\n",
      "\n",
      "Samples were drawn using NUTS at Tue Nov 19 18:39:27 2019.\n",
      "For each parameter, n_eff is a crude measure of effective sample size,\n",
      "and Rhat is the potential scale reduction factor on split chains (at \n",
      "convergence, Rhat=1).\n"
     ]
    }
   ],
   "source": [
    "#results = stan_model.sampling(data=stan_data, chains=8, iter=20000, seed = 69)\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "samples = results.extract()\n",
    "\n",
    "# Plotting posterior base prices (chicken excluded)\n",
    "plt.figure(figsize=(16,6))\n",
    "for i in range(len(df[\"Product\"].unique()) - 1):\n",
    "    plt.plot(sts.uniform.rvs(loc=i+1-0.2, scale=0.4, size=4000), samples['base_price'][:,i], ',', alpha=0.5)\n",
    "plt.title('Posterior samples of base prices (chicken excluded)')\n",
    "plt.xticks(range(1, len(df[\"Product\"].unique())), list(mapper['Product'].values()))\n",
    "plt.ylim(0, 25)\n",
    "plt.show()\n",
    "\n",
    "# Plotting posterior base prices\n",
    "plt.figure(figsize=(16,6))\n",
    "for i in range(len(df[\"Product\"].unique())):\n",
    "    plt.plot(sts.uniform.rvs(loc=i+1-0.2, scale=0.4, size=4000), samples['base_price'][:,i], ',', alpha=0.5)\n",
    "plt.title('Posterior samples of base prices')\n",
    "plt.xticks(range(1, 1+ len(df[\"Product\"].unique())), list(mapper['Product'].values()))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product</th>\n",
       "      <th>Average Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Apples</td>\n",
       "      <td>5.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bananas</td>\n",
       "      <td>3.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tomatoes</td>\n",
       "      <td>8.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Potatoes</td>\n",
       "      <td>2.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flour</td>\n",
       "      <td>2.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Rice</td>\n",
       "      <td>6.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Milk</td>\n",
       "      <td>2.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Butter</td>\n",
       "      <td>15.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Eggs</td>\n",
       "      <td>0.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Chicken Breasts</td>\n",
       "      <td>17.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Product  Average Price\n",
       "0            Apples            5.35\n",
       "1           Bananas            3.90\n",
       "2          Tomatoes            8.43\n",
       "3          Potatoes            2.76\n",
       "4             Flour            2.40\n",
       "5              Rice            6.84\n",
       "6              Milk            2.17\n",
       "7            Butter           15.95\n",
       "8              Eggs            0.56\n",
       "9   Chicken Breasts           17.83"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "base_prices = pd.DataFrame({'Average Price':samples[\"base_price\"].mean(axis=0),\n",
    "                            'Product':list(mapper[\"Product\"].values())})\n",
    "display(base_prices[[\"Product\", \"Average Price\"]].round(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting posterior neighborhood multipliers\n",
    "plt.figure(figsize=(12,6))\n",
    "for i in range(len(df[\"Store_Name\"].unique())):\n",
    "    plt.plot(sts.uniform.rvs(loc=i+1-0.1, scale=0.2, size=4000), samples['store_multiplier'][:,i], ',', alpha=0.5)\n",
    "plt.plot(range(1, 1 + len(df[\"Store_Name\"].unique())),samples['store_multiplier'].mean(axis=0), \n",
    "         marker='.', linewidth=0,color=\"black\", alpha=0.8, markersize=12)\n",
    "plt.title('Posterior samples of store multipliers')\n",
    "plt.xticks(list(mapper['Store_Name'].keys()), list(mapper['Store_Name'].values()))\n",
    "plt.grid(True, alpha=0.6, axis='y')\n",
    "plt.ylim(0, 5)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,6))\n",
    "for i in range(len(df[\"Neighborhood\"].unique())):\n",
    "    plt.plot(sts.uniform.rvs(loc=i+1-0.2, scale=0.4, size=4000), samples['neighborhood_multiplier'][:,i], ',', alpha=0.5)\n",
    "plt.plot(range(1, 1 + len(df[\"Neighborhood\"].unique())),samples['neighborhood_multiplier'].mean(axis=0), \n",
    "         marker='.', linewidth=0,color=\"black\", alpha=0.8, markersize=12)\n",
    "plt.title('Posterior samples of neighborhood multipliers')\n",
    "plt.xticks(list(mapper['Neighborhood'].keys()), list(mapper['Neighborhood'].values()))\n",
    "plt.ylim(0.25, 3)\n",
    "plt.grid(True, alpha=0.6, axis='y')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Mean Multiplier</th>\n",
       "      <th>Real Estate Prices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lichtenberg</td>\n",
       "      <td>0.791207</td>\n",
       "      <td>742.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Neukölln</td>\n",
       "      <td>0.859718</td>\n",
       "      <td>809.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>0.881381</td>\n",
       "      <td>1067.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Friedrichshain</td>\n",
       "      <td>0.781540</td>\n",
       "      <td>896.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kreuzberg</td>\n",
       "      <td>0.835687</td>\n",
       "      <td>892.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Schöneberg</td>\n",
       "      <td>0.904345</td>\n",
       "      <td>795.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Prenzlauer Berg</td>\n",
       "      <td>0.762641</td>\n",
       "      <td>874.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Alt-Treptow</td>\n",
       "      <td>0.965713</td>\n",
       "      <td>742.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Tempelhof</td>\n",
       "      <td>0.896213</td>\n",
       "      <td>760.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Neighborhood  Mean Multiplier  Real Estate Prices\n",
       "0      Lichtenberg         0.791207              742.33\n",
       "1         Neukölln         0.859718              809.60\n",
       "2            Mitte         0.881381             1067.60\n",
       "3   Friedrichshain         0.781540              896.60\n",
       "4        Kreuzberg         0.835687              892.60\n",
       "5       Schöneberg         0.904345              795.80\n",
       "6  Prenzlauer Berg         0.762641              874.50\n",
       "7      Alt-Treptow         0.965713              742.67\n",
       "8        Tempelhof         0.896213              760.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Real estate prices and mean posterior neighborhood multipliers have a Pearson correlation coefficient of -0.22.\n"
     ]
    }
   ],
   "source": [
    "lichtenburg = [739,736,752]\n",
    "Neukölln = [812,872,820,743,801]\n",
    "mitte = [1044,1048,1154,1090,1002]\n",
    "Friedrichshain = [976,877,846,842,942]\n",
    "Kreuzberg = [865,854,895,941,908]\n",
    "Schöneberg = [797,705,778,855,844]\n",
    "Prenzlauer_Berg = [856,893]\n",
    "alt_Treptow = [743,755,730]\n",
    "Tempelhof = 760\n",
    "places = [lichtenburg, Neukölln, mitte, Friedrichshain\n",
    "          ,Kreuzberg, Schöneberg, Prenzlauer_Berg, alt_Treptow, Tempelhof]\n",
    "rental_prices1 = list(np.mean(i).round(2) for i in places)\n",
    "rental_prices1\n",
    "multipliers = pd.DataFrame({\n",
    "    \"Neighborhood\":list(mapper['Neighborhood'].values()), \n",
    "    \"Mean Multiplier\":samples['neighborhood_multiplier'].mean(axis=0)}).drop([4,5,8,10], axis=0).reset_index(drop=True)\n",
    "\n",
    "price_variation1 = pd.concat([multipliers, pd.DataFrame({\"Real Estate Prices\":rental_prices1})], axis=1)\n",
    "    \n",
    "display(price_variation1)\n",
    "cor = sts.pearsonr(price_variation1[\"Mean Multiplier\"],price_variation1[\"Real Estate Prices\"])[0]\n",
    "print(\"Real estate prices and mean posterior neighborhood multipliers have a Pearson correlation coefficient of {:.2f}.\".\\\n",
    "      format(cor))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Scatter plot of Mean Area Multiplier Factor vs Mean Area Rental Prices')"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = price_variation['Mean Multiplier']\n",
    "y = price_variation['Real Estate Prices']\n",
    "b, m = np.polynomial.polynomial.polyfit(x, y, 1)\n",
    "area_dict = price_variation['Neighborhood']\n",
    "\n",
    "area_names = [v for k,v in area_dict.items()]\n",
    "\n",
    "plt.figure(figsize = (16,6))\n",
    "plt.scatter(x,y)\n",
    "plt.plot(x, b + m * x, '-')\n",
    "plt.xlabel(\"Mean area multiplier factor\")\n",
    "plt.ylabel(\"Mean area rental prices\")\n",
    "plt.title(\"Scatter plot of Mean Area Multiplier Factor vs Mean Area Rental Prices\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.125"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0.25/(3-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
